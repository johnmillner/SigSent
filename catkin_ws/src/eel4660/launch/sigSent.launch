<launch>
    <!-- Turtlebot -->
    <arg name="base"              default="$(env TURTLEBOT_BASE)"         doc="mobile base type [create, roomba]"/>
    <arg name="stacks"            default="$(env TURTLEBOT_STACKS)"       doc="stack type displayed in visualisation/simulation [circles, hexagons]"/>
    <arg name="serialport"        default="$(env TURTLEBOT_SERIAL_PORT)"  doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>
    <arg name="3d_sensor"         default="$(env TURTLEBOT_3D_SENSOR)"    doc="3d sensor types [kinect, asux_xtion_pro]"/>
    
    <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
        <arg name="base" value="$(arg base)" />
        <arg name="stacks" value="$(arg stacks)" />
        <arg name="3d_sensor" value="$(arg 3d_sensor)" />
    </include>

    <include file="$(find turtlebot_bringup)/launch/includes/mobile_base.launch.xml">
        <arg name="base" value="$(arg base)" />
        <arg name="serialport" value="$(arg serialport)" />
    </include>

    <!-- JTM - Hokuyo UTM-30lx LIDAR -->
    <node name="lidar" pkg="urg_node" type="urg_node" respawn="true" output="screen">
        <param name="calibrate_time" type="bool" value="true"/>
        <param name="port" type="string" value="/dev/ttyACM0"/>
        <param name="intensity" type="bool" value="false"/>
        <param name="min_ang" value="-2.2689"/>
        <param name="max_ang" value="+2.2689"/>
        <param name="cluster" value="1"/>    
        <param name="frame_id" value="base_link"/>
    </node>

    <!-- JTM - Sparkfun Razor IMU 9DoF 14001 -->
    <node name="imu" pkg="razor_imu_9dof_14001" type="razor.py" respawn="true" output="screen"/>

    <!-- JTM - Sparkfun Venus638FLPx -->
    <node name="gps" pkg="nmea_navsat_driver" type="nmea_serial_driver" respawn="true" output="screen">
        <param name="port" type="string" value="/dev/ttyS0" />
        <param name="baud" type="int" value="9800" />
    </node>

    <!-- JTM - RasPi Cam -->
    <node name="RasPiCam" pkg="raspicam_node" type="raspicam_node" respawn="true" output="screen"/>
    
    <!-- JTM - turns GPS fix message to a UTM for move_base -->
    <node name="gpsTOutm" pkg="gps_common" type="utm_odometry_node" />
    
    <!-- JTM - turns GPS fix message to a Stamped Pose message for gps_goal -->
    <node name="gpsTOpose" pkg="eel4660" type="fix_to_pose.py" />
    
    <!-- JTM - extended khalman filter -->
    <node name="ekf" pkg="robot_pose_ekf" type="robot_pose_ekf" />
    
    <!-- JTM - transform -->
    <node name="tf" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 /base_link /laser 10" />
    
    <!-- JTM - SLAM -->
    <node name="gmapping" pkg="gmapping" type="slam_gmapping" >
        <param name="base_frame" value="base_link" />
        <param name="odom_frame" value="odom" />
        <param name="map_frame" value="map" />
        <param name="scan" value="scan" />
        
    </node>
    
    <!-- JTM - AMCL -->
    <node name="amcl" pkg="amcl" type="amcl" >
        <param name="use_map_topic" value='true' />
        <param name="odom_model_type" value="diff-corrected" />
    </node>
    
    <!-- Move base -->
    <arg name="custom_param_file" default="$(find turtlebot_navigation)/param/$(arg 3d_sensor)_costmap_params.yaml"/>
    <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml">
    	<arg name="custom_param_file" value="dummy.yaml"/>
    	<remap from='odom_combined' to='odom' />
    </include>

    <!-- JTM - GPS goal -->
    <node name="gps_goal" pkg="gps_goal" type="gps_goal" />

</launch>
