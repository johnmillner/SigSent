<!-- need to figure out proper linking between lidar and amcl and etc-->

<launch>
  <!-- Turtlebot -->
  <arg name="base"              default="$(env TURTLEBOT_BASE)"         doc="mobile base type [create, roomba]"/>
  <arg name="stacks"            default="$(env TURTLEBOT_STACKS)"       doc="stack type displayed in visualisation/simulation [circles, hexagons]"/>
  <arg name="3d_sensor"         default="$(env TURTLEBOT_3D_SENSOR)"    doc="3d sensor types [kinect, asux_xtion_pro]"/>
  <arg name="simulation"        default="$(env TURTLEBOT_SIMULATION)"   doc="set flags to indicate this turtle is run in simulation mode."/>
  <arg name="serialport"        default="$(env TURTLEBOT_SERIAL_PORT)"  doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>

  <param name="/use_sim_time" value="$(arg simulation)"/>

  <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
    <arg name="base" value="$(arg base)" />
    <arg name="stacks" value="$(arg stacks)" />
    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
  </include>
  
  <include file="$(find turtlebot_bringup)/launch/includes/mobile_base.launch.xml">
    <arg name="base" value="$(arg base)" />
    <arg name="serialport" value="$(arg serialport)" />
  </include>
 
  
  
<!-- Move base -->
<include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>
  <!--
    -     add rviz
    -   * add amcl
    -   * add gmapping
    -   * add global_planner
    -     add SMACH
    -   * add nmea_navsat_driver
    -   * add razor_imu_driver
    -   * add urg_node
   -->

  
  
  <!-- JTM - Hokuyo UTM-30lx LIDAR -->
  <node name="hokuyo" pkg="urg_node" type="urg_node" respawn="false" output="screen">
    <param name="calibrate_time" type="bool" value="true"/>
    <param name="port" type="string" value="/dev/ttyACM0"/>
    <param name="intensity" type="bool" value="false"/>
    <param name="min_ang" value="-2.2689"/>
    <param name="max_ang" value="+2.2689"/>
    <param name="cluster" value="1"/>    
    <param name="frame_id" value="base_footprint"/>
   </node>
   
   <!-- JTM Gmapping -->
   <node name = "gmapping" pkg="gmapping" type="slam_gmapping" respawn="false" output="screen">
    <param name="scan_topic" value="/scan" />
    <param name="base_frame" value="base_footprint"/>
    <param name="odom_frame" value="odom"/>
    
   </node>
   
    <!-- JTM - Sparkfun Razor IMU 9DoF 14001 -->
    <node name="imu" pkg="razor_imu_9dof_14001" type="razor.py" respawn="false" output="screen"/>
  
    <!-- JTM - Sparkfun Venus638FLPx -->
    <node name="gps" pkg="nmea_navsat_driver" type="nmea_serial_driver" respawn="false" output="screen">
        <param name="port" type="string" value="/dev/ttyS0" />
        <param name="baud" type="int" value="9800" />
    </node>
    
    <!-- JTM - RasPi Cam -->
    <node name="RasPiCam" pkg="raspicam_node" type="raspicam_node" respawn="false" output="screen"/>
    
    <!-- AMCL -->
      <arg name="custom_amcl_launch_file" default="$(find turtlebot_navigation)/launch/includes/amcl/$(arg 3d_sensor)_amcl.launch.xml"/>
      <arg name="initial_pose_x" default="0.0"/> <!-- Use 17.0 for willow's map in simulation -->
      <arg name="initial_pose_y" default="0.0"/> <!-- Use 17.0 for willow's map in simulation -->
      <arg name="initial_pose_a" default="0.0"/>
      <include file="$(arg custom_amcl_launch_file)">
        <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
        <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
        <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
    </include>
    
    <!--gps convert from navSatFix to odom -->
    <node name="gps_conv" pkg="gps_common" type="utm_odometry_node">
      <remap from="odom" to="vo"/>
      <remap from="fix" to="/gps/fix" />
      <param name="rot_covariance" value="99999" />
      <param name="frame_id" value="base_footprint" />
    </node>'
    
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="freq" value="30.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="true"/>
        <param name="vo_used" value="true"/>
        <param name="debug" value="false"/>
        <param name="self_diagnose" value="false"/>
        <remap from="vo" to="gps_meas" />
      </node>
      
      <!--convert GPS fix to UTM for move_base-->
     <node pkg="gps_common" type="utm_odometry_node" name = "utm_odometry_node"/>
     
     <!--convert GPS fix to a pose-->
     <node name = "fix_to_pose" pkg = "eel4660" type="fix_to_pose" />
     
     <!--translates GPS goals to action goals for move_base -->
     <node name="gps_goal" pkg="gps_goal" type="gps_goal"/>
     
     
     
    
</launch>
