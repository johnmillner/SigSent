<!--    John Millner
        Sigsent 
        Group 11
-->

<launch>
    <!-- put nodes meant to run on the basestation computer here -->


  <arg name="_dict" value="_dict:=$(find pocketsphinx)/vocab/voice_cmd.dic" />
  <arg name="_kws" value="_kws:=$(find pocketsphinx)/vocab/voice_cmd.kwlist" />
  <arg name="_stream" value="_stream:=true" />
  <arg name="_wavpath" value="_wavpath:=none" />
  <node name="pocketsphinx_recognizer" pkg="pocketsphinx" type="recognizer.py" output="screen" args="$(arg _dict) $(arg _kws) $(arg _stream) $(arg _wavpath)" />

	<!-- Joystick 
	<node respawn="false" pkg="joy" type="joy_node" name="joy" >
        <param name="dev" type="string" value="/dev/input/js0" />
        <param name="deadzone" value="0.05" />
    </node>-->

	<!-- GPS goal -->
	<!--
    <node name="gps_goal" pkg="gps_goal" type="gps_goal" />
    -->
    <!-- transform -->
    <node name="tf_laser" pkg="tf" type="static_transform_publisher" args="0 0 1 0 0 0 /base_link /laser 10" />
    
	<!-- SLAM -->
    <node name="gmapping" pkg="gmapping" type="slam_gmapping" >
        <param name="base_frame" value="base_link" />
        <param name="odom_frame" value="odom" />
        <param name="map_frame" value="map" />
        <param name="scan" value="scan" />        
    </node>
    
	
	<include file="$(find turtlebot_navigation)/launch/includes/velocity_smoother.launch.xml"/>
	<include file="$(find turtlebot_navigation)/launch/includes/safety_controller.launch.xml"/>
	
	<!-- Move base -->
	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
		<rosparam file="$(find sigsent)/params/move_base.yaml" command="load" />
		<remap from="cmd_vel" to="navigation_velocity_smoother/raw_cmd_vel" />
	</node> 
	
	<!-- RVIZ -->
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find sigsent)/rviz/sigsent.rviz"/>

    <!-- Audio -->
    <node name="basestation_audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
        <remap from="audio" to="basestation_audio"/>
    </node>

    <node name="basestation_audio_play" pkg="audio_play" type="audio_play" output="screen">
        <remap from="audio" to="sigsent_audio"/>
    </node>

	<!-- put nodes meant to run on the sigsent raspi computer here -->

	<group>
		<!-- info to run nodes on sigsent-->
    	<machine name="sigsent" address="sigsent" env-loader="~/sigsent.bash" default="true" user="sigsent" timeout="10.0" />
        
        <!-- Turtlebot -->
		<arg name="base"              default="$(env TURTLEBOT_BASE)"         doc="mobile base type [create, roomba]"/>
		<arg name="stacks"            default="$(env TURTLEBOT_STACKS)"       doc="stack type displayed in visualisation/simulation [circles, hexagons]"/>
		<arg name="serialport"        default="$(env TURTLEBOT_SERIAL_PORT)"  doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>
		<arg name="3d_sensor"         default="$(env TURTLEBOT_3D_SENSOR)"    doc="3d sensor types [kinect, asux_xtion_pro]"/>
		
		<!-- Turtlebot config files -->
		<include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
		    <arg name="base" value="$(arg base)" />
		    <arg name="stacks" value="$(arg stacks)" />
		    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
		</include>

        <!-- Mobile Base for turtlebot -->
		<include file="$(find turtlebot_bringup)/launch/includes/mobile_base.launch.xml">
		    <arg name="base" value="$(arg base)" />
		    <arg name="serialport" value="$(arg serialport)" />
		</include>
		
		<!-- MPU-9250 -->
		<node name="imu" pkg="i2c_imu" type="i2c_imu_node" respawn="true" output="screen">
		    <remap from="data" to="imu" />
		</node>

		<!-- Sparkfun Venus638FLPx -->
		<node name="gps" pkg="nmea_navsat_driver" type="nmea_serial_driver" respawn="true" output="screen">
		    <param name="port" type="string" value="/dev/ttyS0" />
		    <param name="baud" type="int" value="115200" />
		</node>
	
		<node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
			<param name="video_device" value="/dev/video0" />
			<param name="image_width" value="640" />
			<param name="image_height" value="480" />
			<param name="pixel_format" value="yuyv" />
			<param name="camera_frame_id" value="usb_cam" />
			<param name="io_method" value="mmap"/>
		</node>
    
	    <!-- Hokuyo UTM-30lx LIDAR -->
		<node name="lidar" pkg="urg_node" type="urg_node" respawn="true" output="screen">
		    <param name="calibrate_time" type="bool" value="true"/>
		    <param name="port" type="string" value="/dev/ttyACM0"/>
		    <param name="intensity" type="bool" value="false"/>
		    <param name="min_ang" value="-2.2689"/>
		    <param name="max_ang" value="+2.2689"/>
		    <param name="cluster" value="1"/>    
		    <param name="frame_id" value="base_link"/>
		</node>
		
		<!-- REW - Enables/disables lightbar by writing out GPIO pin connected to it's MOSFET -->
        <node name="lightbar" pkg="sigsent" type="lightbar.py" respawn="false" />
        
        <!-- Audio -->
        <node name="sigsent_audio_capture" pkg="audio_capture" type="audio_capture" output="screen">
            <remap from="audio" to="sigsent_audio"/>
        </node>

        <node name="sigsent_audio_play" pkg="audio_play" type="audio_play" output="screen">
            <remap from="audio" to="basestation_audio"/>
        </node>
    </group>

</launch>


