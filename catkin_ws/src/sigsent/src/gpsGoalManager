#!/usr/bin/python
import rospy

from sensor_msgs.msg import NavSatFix
from geometry_msgs.msg import PoseStamped
from actionlib_msgs.msg import GoalStatus

    
def checker(data):
    rospy.loginfo("gpsGoalManager: checking satillite connection")
    
    #check for satilite connection, if none, wait one second and check again
    while data.status < 0:
        rospy.logingo("gpsGoalManager: waiting for valid GPS fix")
        rate.sleep()
        
    rospy.logingo("gpsGoalManager: Valid GPS fix found, setting up gpsGoal node")
    
    #with valid satillite connection, set local_xy_origin
    #set up publisher
    localXYorigin = rospy.Publisher('local_xy_origin', PoseStamped, queue_size=10)
    
    msg = new PoseStamped()
    msg.header = data.header
    
    msg.pose.position.x = data.latitude
    msg.pose.position.y = data.longitude
    msg.pose.position.z = data.altitude
    
    #orientation is currently zerod out, but maybe integrate imu later?
    msg.pose.orientation.x = 0
    msg.pose.orientation.y = 0
    msg.pose.orientation.z = 0
    msg.pose.orientation.w = 0
    
    #publish message once
    localXYorigin.publish( msg )
     
    
def init():
    
    #set up publisher
    gpsGoal = rospy.Publisher('gps_goal_fix', String, queue_size=10)
    
    #start up node
    rospy.init_node('gpsGoalManager')
    
    #check that GPS is operational and giving signals   
    rospy.Subscriber("fix", NavSatFix, checker)    
        
#updates the list of gps points
def newMessage( data ):
    rospy.loginfo("gpsGoalManager: updated list of GPS goals!")
    gpsList = data.gpsList
    
def move_baseStatus( data ):
    rospy.loginfo("gpsGoalManager: move_base has updated its status!")
    status = data
            
def operation():
    rospy.Subscriber("gpsGoals", gpsGoals, newMessage() )
    rospy.Subscriber("move_base/status", move_base/status, move_baseStatus() )
    gpsGoal = rospy.Publisher('gps_goal', NavSatFix, queue_size=10)
    confirmedGoal = rospy.Publisher('confirmed_goal', NavSatFix, queue_size=10)
    
    while not rospy.is_shutdown():
        
        #loop through list of GPS goals as they come
        #whenever the gps goals are updated, operation() is interupted and the list is updated
        for gpsPoint in gpsList:
            rospy.loginfo("gpsGoalManager: going to new point")
            #publish the goal to gps_goal
            gpsGoal.publish( gpsPoint )
            
            #wait for goal to be accepted by move_base
            while status = 0:
                rate.sleep()
                
            #ensure that the goal was successfully accepted - if not, move to next goal
            if status not 1 or status not 3:
                rospy.logwarn("gpsGoalManager: there was an issue with move_base")
                continue
            
            #wait for robot to travel to goal    
            while status = 1
                rate.sleep
                
            #if goal not reached, shrug - gotta chug on?
            if status not 3
                rospy.logwarn("gpsGoalManager: there was an issue with move_base")
                continue        
            
            rospy.loginfo("gpsGoalManager: Reached last goal!")
            #we've made it to our goal, lets wait a little bit
            rospy.Rate(5).sleep()
            
            #set up confirmation message
            msg = gpsPoint
            msg.header.stamp = rospy.Time.now()
            
            #publish that junk
            confirmedGoal.publish( msg )
                

if __name__ == '__main__':
    try:
        rate = rospy.Rate(1)
        gpsList = new list()
        status = 9
    
        init()
        operation()
    except rospy.ROSInterruptException:
        pass
